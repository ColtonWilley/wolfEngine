diff --git a/crypto/hmac/hmactest.c b/crypto/hmac/hmactest.c
index 5a573950a4..ade854fa31 100644
--- a/crypto/hmac/hmactest.c
+++ b/crypto/hmac/hmactest.c
@@ -69,6 +69,7 @@ int main(int argc, char *argv[])
     return (0);
 }
 #else
+# include <openssl/engine.h>
 # include <openssl/hmac.h>
 # ifndef OPENSSL_NO_MD5
 #  include <openssl/md5.h>
@@ -144,6 +145,18 @@ int main(int argc, char *argv[])
     HMAC_CTX ctx, ctx2;
     unsigned char buf[EVP_MAX_MD_SIZE];
     unsigned int len;
+    ENGINE *e = NULL;
+
+    ENGINE_load_dynamic();
+    e = ENGINE_by_id("wolfengine");
+    if (e == NULL) {
+        printf("Failed to find engine!\n");
+        return 1;
+    }
+    if (ENGINE_ctrl_cmd(e, "enable_debug", 1, NULL, NULL, 0) != 1) {
+        printf("Failed to enable wolfEngine debug logging.\n");
+        return 1;
+    }
 
 # ifdef OPENSSL_NO_MD5
     printf("test skipped: MD5 disabled\n");
@@ -173,7 +186,7 @@ int main(int argc, char *argv[])
 
 /* test4 */
     HMAC_CTX_init(&ctx);
-    if (HMAC_Init_ex(&ctx, NULL, 0, NULL, NULL)) {
+    if (HMAC_Init_ex(&ctx, NULL, 0, NULL, e)) {
         printf("Should fail to initialise HMAC with empty MD and key (test 4)\n");
         err++;
         goto test5;
@@ -183,7 +196,7 @@ int main(int argc, char *argv[])
         err++;
         goto test5;
     }
-    if (HMAC_Init_ex(&ctx, NULL, 0, EVP_sha1(), NULL)) {
+    if (HMAC_Init_ex(&ctx, NULL, 0, EVP_sha1(), e)) {
         printf("Should fail to initialise HMAC with empty key (test 4)\n");
         err++;
         goto test5;
@@ -197,7 +210,7 @@ int main(int argc, char *argv[])
 test5:
     HMAC_CTX_cleanup(&ctx);
     HMAC_CTX_init(&ctx);
-    if (HMAC_Init_ex(&ctx, test[4].key, test[4].key_len, NULL, NULL)) {
+    if (HMAC_Init_ex(&ctx, test[4].key, test[4].key_len, NULL, e)) {
         printf("Should fail to initialise HMAC with empty MD (test 5)\n");
         err++;
         goto test6;
@@ -207,12 +220,12 @@ test5:
         err++;
         goto test6;
     }
-    if (HMAC_Init_ex(&ctx, test[4].key, -1, EVP_sha1(), NULL)) {
+    if (HMAC_Init_ex(&ctx, test[4].key, -1, EVP_sha1(), e)) {
         printf("Should fail to initialise HMAC with invalid key len(test 5)\n");
         err++;
         goto test6;
     }
-    if (!HMAC_Init_ex(&ctx, test[4].key, test[4].key_len, EVP_sha1(), NULL)) {
+    if (!HMAC_Init_ex(&ctx, test[4].key, test[4].key_len, EVP_sha1(), e)) {
         printf("Failed to initialise HMAC (test 5)\n");
         err++;
         goto test6;
@@ -234,12 +247,12 @@ test5:
         err++;
         goto test6;
     }
-    if (HMAC_Init_ex(&ctx, NULL, 0, EVP_sha256(), NULL)) {
+    if (HMAC_Init_ex(&ctx, NULL, 0, EVP_sha256(), e)) {
         printf("Should disallow changing MD without a new key (test 5)\n");
         err++;
         goto test6;
     }
-    if (!HMAC_Init_ex(&ctx, test[4].key, test[4].key_len, EVP_sha256(), NULL)) {
+    if (!HMAC_Init_ex(&ctx, test[4].key, test[4].key_len, EVP_sha256(), e)) {
         printf("Failed to reinitialise HMAC (test 5)\n");
         err++;
         goto test6;
@@ -261,7 +274,7 @@ test5:
         err++;
         goto test6;
     }
-    if (!HMAC_Init_ex(&ctx, test[6].key, test[6].key_len, NULL, NULL)) {
+    if (!HMAC_Init_ex(&ctx, test[6].key, test[6].key_len, NULL, e)) {
         printf("Failed to reinitialise HMAC with key (test 5)\n");
         err++;
         goto test6;
@@ -287,7 +300,7 @@ test5:
 test6:
     HMAC_CTX_cleanup(&ctx);
     HMAC_CTX_init(&ctx);
-    if (!HMAC_Init_ex(&ctx, test[7].key, test[7].key_len, EVP_sha1(), NULL)) {
+    if (!HMAC_Init_ex(&ctx, test[7].key, test[7].key_len, EVP_sha1(), e)) {
         printf("Failed to initialise HMAC (test 6)\n");
         err++;
         goto end;
