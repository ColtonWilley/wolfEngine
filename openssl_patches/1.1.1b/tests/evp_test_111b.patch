diff --git a/test/evp_test.c b/test/evp_test.c
index 85c1552a..e28e0fba 100644
--- a/test/evp_test.c
+++ b/test/evp_test.c
@@ -17,6 +17,7 @@
 #include <openssl/x509v3.h>
 #include <openssl/pkcs12.h>
 #include <openssl/kdf.h>
+#include <openssl/engine.h>
 #include "internal/numbers.h"
 #include "testutil.h"
 #include "evp_test.h"
@@ -776,6 +777,14 @@ static int cipher_test_run(EVP_TEST *t)
                              inp_misalign ? "misaligned" : "aligned",
                              frag ? "" : "not ");
             }
+
+            if (cdat->aead == EVP_CIPH_GCM_MODE &&
+                    cdat->iv_len > 16) {
+                printf("IV size %ld is greater than wolfEngine "
+                       "GCM_NONCE_MAX_SZ (16), skipping test.\n", cdat->iv_len);
+                return 1;
+            }
+
             if (cdat->enc) {
                 rv = cipher_test_enc(t, 1, out_misalign, inp_misalign, frag);
                 /* Not fatal errors: return */
@@ -802,6 +811,8 @@ static int cipher_test_run(EVP_TEST *t)
              * lengths so we don't fragment for those
              */
             if (cdat->aead == EVP_CIPH_CCM_MODE
+                    /* wolfengine doesn't support fragmented GCM */
+                    || cdat->aead == EVP_CIPH_GCM_MODE
                     || EVP_CIPHER_mode(cdat->cipher) == EVP_CIPH_XTS_MODE
                     || EVP_CIPHER_mode(cdat->cipher) == EVP_CIPH_WRAP_MODE)
                 break;
@@ -958,17 +969,30 @@ static int mac_test_run(EVP_TEST *t)
     size_t got_len;
     int i;
 
-#ifdef OPENSSL_NO_DES
+    /* wolfengine only supports CMAC with AES. */
     if (expected->alg != NULL && strstr(expected->alg, "DES") != NULL) {
         /* Skip DES */
         t->err = NULL;
         goto err;
     }
-#endif
 
-    if (expected->type == EVP_PKEY_CMAC)
+    if (expected->type == EVP_PKEY_CMAC) {
+#if 0
         key = EVP_PKEY_new_CMAC_key(NULL, expected->key, expected->key_len,
                                     EVP_get_cipherbyname(expected->alg));
+#else
+        ENGINE *e = ENGINE_get_pkey_meth_engine(NID_cmac);
+        EVP_PKEY_CTX *pctx;
+        pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_CMAC, e);
+        EVP_PKEY_keygen_init(pctx);
+        EVP_PKEY_CTX_ctrl(pctx, -1, EVP_PKEY_OP_KEYGEN,
+                EVP_PKEY_CTRL_CIPHER, 0,
+                (void*)EVP_get_cipherbyname(expected->alg));
+        EVP_PKEY_CTX_ctrl(pctx, -1, EVP_PKEY_OP_KEYGEN,
+                EVP_PKEY_CTRL_SET_MAC_KEY, expected->key_len, expected->key);
+        EVP_PKEY_keygen(pctx, &key);
+#endif
+    }
     else
         key = EVP_PKEY_new_raw_private_key(expected->type, NULL, expected->key,
                                            expected->key_len);
